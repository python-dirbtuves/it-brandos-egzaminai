#!/usr/bin/env python3

import argparse
import os
import pathlib
import subprocess
import sys


class Config:

    def __init__(self, base, venv='env'):
        self.base = base
        self.venv = base / os.path.expanduser(venv)
        loc = 'Scripts' if os.name == 'nt' else 'bin'
        py = '/python.exe' if os.name == 'nt' else '/python'
        self.executable = self.venv / (loc + py)
        self.pip = self.venv / (loc + '/pip')
        self.mypy = self.venv / (loc + '/mypy')
        self.pytest = self.venv / (loc + '/py.test')
        self.flake8 = self.venv / (loc + '/flake8')
        self.restview = self.venv / (loc + '/restview')


def ensure_venv(config: Config):
    if not config.venv.exists():
        subprocess.run([sys.executable, '-m', 'venv', str(config.venv)], check=True)
    if not config.pip.exists():
        subprocess.run(["curl", "https://bootstrap.pypa.io/get-pip.py", "-o", "get-pip.py"], check=True)
        subprocess.run([config.executable, "get-pip.py"], check=True)
    required_packages = [package for package in config.__dir__() if not package.startswith("__")]
    for package in required_packages:
        if not getattr(config, package).exists():
            subprocess.run([str(config.pip), 'install', '-r', 'requirements.txt'], check=True)
            break


def run_mypy(config, path):
    files = [path.parent / x for x in os.listdir(path.parent) if x.endswith('.py') and not x.startswith('test')]
    subprocess.run(
        [str(config.mypy), '--follow-imports=skip', '--show-traceback'] + [str(i) for i in files],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True,
        check=True,
    )


def run_pytest(config, path):
    coverage = sum([['--cov', u.stem] for u in path.parent.glob('u*.py')], [])
    subprocess.run(
        [str(config.pytest), '-vvx', '--tb=native'] + coverage + ['--cov-report', 'term-missing', '--cov-fail-under',
                                                                  '100', str(path)],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True,
        check=True,
    )


def run_flake8(config, path):
    subprocess.run(
        [str(config.flake8), '--exclude=env,.ropeproject', '--max-line-length=120', str(path)],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True,
        check=True,
    )


def run_tests(config: Config, paths):
    for path in paths:
        print('%-42s' % ('%s...' % path.parent.relative_to(config.base)), end=' ', flush=True)
        try:
            run_mypy(config, path)
            run_pytest(config, path)
            run_flake8(config, path)
        except subprocess.CalledProcessError as e:
            print()
            print(e.stdout)
            return e.returncode
        else:
            print('OK', flush=True)
    print("All tests PASS.")


def find_tests(paths):
    for path in paths:
        path = path.parent if path.is_file() else path
        yield from sorted(path.resolve().glob('**/tests.py'))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('paths', nargs='*')
    parser.add_argument('--venv', default='env')
    args = parser.parse_args()

    base = pathlib.Path(__file__).resolve().parent
    config = Config(base, args.venv)

    if args.paths:
        paths = args.paths
    else:
        paths = sorted([pathlib.Path(base / 'exams' / x) for x in os.listdir(base / 'exams') if x.isdigit()])

    ensure_venv(config)
    return run_tests(config, find_tests(map(pathlib.Path, paths)))


if __name__ == '__main__':
    sys.exit(main() or 0)
