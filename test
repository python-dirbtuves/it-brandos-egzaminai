#!/usr/bin/env python3

import argparse
import os
import pathlib
import subprocess
import sys
from itertools import chain
from typing import List


class Config:

    def __init__(self, base, venv='env'):
        self.base = base
        self.venv = base / os.path.expanduser(venv)
        loc = 'Scripts' if os.name == 'nt' else 'bin'
        self.pip = self.venv / (loc + '/pip')
        self.mypy = self.venv / (loc + '/mypy')
        self.pytest = self.venv / (loc + '/py.test')
        self.flake8 = self.venv / (loc + '/flake8')
        self.restview = self.venv / (loc + '/restview')


def ensure_venv(config: Config):
    if not config.venv.exists():
        subprocess.run([sys.executable, '-m', 'venv', str(config.venv)], check=True)
        subprocess.run([str(config.pip), 'install', '-r', 'requirements.txt'], check=True)


def run_mypy(config, paths: List[str]):
    subprocess.run(
        [str(config.mypy), '--follow-imports=skip', '--show-traceback'] +
        list(chain.from_iterable(['-p', p] for p in paths)),
        universal_newlines=True,
        check=True,
    )


def run_pytest(config, paths):
    coverage = []
    for p in paths:
        if p.name == 'tests.py':
            coverage += ['--cov', p.parent]
        else:
            coverage += ['--cov', p]
    subprocess.run(
        [str(config.pytest), '-vvx', '--tb=native'] + coverage + ['--cov-report', 'term-missing', '--cov-fail-under', '100'] + paths,
        universal_newlines=True,
        check=True,
    )


def run_flake8(config, paths):
    subprocess.run(
        [str(config.flake8), '--exclude=env,.ropeproject', '--max-line-length=120'] + paths,
        universal_newlines=True,
        check=True,
    )


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('paths', nargs='*')
    parser.add_argument('--venv', default='env')
    args = parser.parse_args()

    base = pathlib.Path(__file__).resolve().parent
    config = Config(base, args.venv)

    if args.paths:
        paths = args.paths
    else:
        paths = ['exams']

    paths = [pathlib.Path(p) for p in paths]

    ensure_venv(config)

    try:
        run_mypy(config, paths)
        run_pytest(config, paths)
        run_flake8(config, paths)
    except subprocess.CalledProcessError as e:
        return e.returncode


if __name__ == '__main__':
    sys.exit(main() or 0)
